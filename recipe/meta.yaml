{% set version = "1.2.8rc1" %}

{% set build_num = 0 %}

{% if cuda_compiler_version == "None" %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% set build_num = build_num + 100 %}
{% endif %}

package:
  name: catboost
  version: {{ version }}

source:
  url: https://github.com/andrey-khropov/catboost/archive/refs/tags/v{{ version }}.tar.gz
  sha256: dcc5823683bdcda38575e317ec84ef827b0e051dfbb7fd42df4b9a7067fe065f
  patches:
    - conda.diff

build:
  number: {{ build_num }}
  # We build from source on Unix and re-package binaries on windows
  #  Yandex supplies whl files on PyPI for:
  # - Win-64: Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13
  skip: True  # [win32]
  skip: True  # [python_impl == 'pypy']
  # There are issues with python 3.8 on macOS 11.x: https://github.com/conda-forge/python-feedstock/issues/445
  #  so Conda has issues with tags compatibility with platform tags 'macosx_11_0_...'
  #  so disable this configuration for now
  skip: True  # [osx and x86_64 and (py == 38)]
  # TODO: support Linux on ppc64le: https://github.com/catboost/catboost/issues/2145
  skip: True  # [ppc64le]
  # Wheels from PyPI have a single version that already contains CUDA support so do not do separate builds on Windows,
  # just have a single version for now
  # TODO: build from source on Windows
  skip: True  # [win and cuda_compiler_version != "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [unix and cuda_compiler_version != "None"]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                 # [unix and cuda_compiler_version == "None"]
  # de-prioritize the CPU variants
  track_features:     # [cuda_compiler_version == "None"]
    - catboost_cpu    # [cuda_compiler_version == "None"]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython >=3                             # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - jupyterlab 3.0.6.*                     # [unix and build_platform != target_platform]
    - ragel >=6.10                # [unix]
    - yasm >=1.3.0                # [unix]
    - swig >=4.0.2                # [unix]
    - cmake >=3.24                # [unix]
    - make                        # [unix]
    - {{ compiler('cxx') }}       # [linux or osx]
    # clang 14 on conda-forge is non-functional
    - clangxx >=15,<16            # [linux and cuda_compiler_version != "None"]
    - clangxx >=16                # [linux and cuda_compiler_version == "None" and x86_64]
    - clangxx >=18                # [linux and cuda_compiler_version == "None" and aarch64]
    - {{ stdlib('c') }}           # [unix]
    - {{ compiler('cuda') }}      # [unix and cuda_compiler_version != "None"]
    - lld >=7                     # [unix]
    - yarn                        # [unix]
  host:
    - openssl                     # [unix]
    - jupyterlab 3.0.6.*          # [unix]
    - python
    - pip
    - setuptools
    - cython >=3
    - numpy
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    {% if cuda_major >= 12 %}
    - cuda-driver-dev
    - cuda-cudart-dev
    {% endif %}
  run:
    - python
    - numpy >=1.16.0
    - pandas >=0.24.0
    - scipy
    - six
    - plotly
    - matplotlib-base
    - python-graphviz
    #python-graphviz avoids the pip check error
  run_constrained:
    - __cuda  # [cuda_compiler != "None"]
    # relax jupyterlab version constraints from those used in the build
    # catboost only works properly with jupyterlab 3.x for now
    # but we don't want to constrain users to these versions as it only affects catboost visualization
    # and other versions might be preferable for other packages
    - {{ pin_compatible("jupyterlab", max_pin=None) }}   # [unix]

test:
  imports:
    - catboost
  commands:
    - pip check
    - python catboost/pytest/smoke_tests/classification_tutorial_cpu.py
  requires:
    - pip
    - scikit-learn
    - shap
    - traitlets
    - ipython
    - ipywidgets >=7.0,<9.0
  source_files:
    - catboost/pytest/smoke_tests/classification_tutorial_cpu.py

about:
  home: http://catboost.ai
  license: Apache-2.0
  license_family: MIT
  license_file: LICENSE
  license_url: https://github.com/catboost/catboost/blob/master/LICENSE
  summary: 'Gradient boosting on decision trees library'

  description: |
    General purpose gradient boosting on decision trees library with categorical features support out of the box.
    It is easy to install, contains fast inference implementation and supports CPU and GPU (even multi-GPU) computation.
  doc_url: https://catboost.ai/docs/
  dev_url: https://github.com/catboost/catboost

extra:
  recipe-maintainers:
    - sab
    - kizill
    - nikitxskv
    - dbakshee
    - andrey-khropov
    - isuruf
